import { exit, shell_var_get } from "std/env"
import { parse, slice } from "std/text"

unsafe {
    let src_root = shell_var_get("SRCROOT")
    let product_name = shell_var_get("PRODUCT_NAME")
    cd "{src_root}/{product_name}/Resources"
}

let file_name = "Config.xcconfig"
fun increase_build_number() {
    let previous_build = $awk -F "=" '/BUILD_NUMBER/ \{print \$2}' {file_name} | \
        tr -d ' '$ failed {
        echo "Failed to get previous build number"
        fail status
    }

    let current_date = unsafe $date "+%Y%m%d"$
    let previous_date = slice(previous_build, 0, 8)
    let counter = parse(slice(previous_build, 8)) failed {
        echo "Failed to parse previous build number"
        fail status
    }

    let new_counter = (current_date == previous_date) then counter + 1 else 1
    let new_build = current_date + new_counter as Text

    $sed -i -e "/BUILD_NUMBER =/ s/= .*/= {new_build}/" {file_name}$ failed {
        echo "Failed to update build number"
        fail status
    }

    let tmp_file = "{file_name}-e"
    $rm -f {tmp_file}$?

    echo "Bumped Build Number: {new_build}"
}

fun increase_version() {
    let version = $awk -F "=" '/VERSION/ \{print \$2}' {file_name} | \
        tr -d ' '$ failed {
        echo "Failed to get previous version"
        fail status
    }

    echo "Previous Version: {version}"

    let major = parse($echo {version} | cut -d. -f1$?)?
    let minor = parse($echo {version} | cut -d. -f2$?)?
    let patch = parse($echo {version} | cut -d. -f3$?)?

    let configuration = shell_var_get("CONFIGURATION")?
    if configuration == "Release" {
        patch = patch + 1
    }
    let new_version = "{major}.{minor}.{patch}"
    $sed -i -e "/VERSION =/ s/= .*/= {new_version}/" {file_name}$ failed {
        echo "Failed to update version"
        fail status
    }

    let tmp_file = "{file_name}-e"
    $rm -f {tmp_file}$?

    echo "Bumped Version: {new_version}"
}

main {
    increase_build_number()?

    let bump = false
    unsafe silent {
        let bump_version = shell_var_get("BUMP_VERSION")
        bump = parse(bump_version) == 1
    }

    if bump {
        increase_version()?
    } else {
        echo "Skipping version bump"
    }
}
