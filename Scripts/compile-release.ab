import { echo_error, env_var_get } from "std/env"
import { dir_create } from "std/fs"

let project_name = "Americano"
let release_folder = "Releases"
let app_name = "{project_name}.app"
let archive_name = "{project_name}.xcarchive"
let path = trust env_var_get("PATH")

#[allow_generic_return]
fun prepare(shell_file: Text) {
    $set -e$?
    $set -o pipefail$?

    let root_dir = trust $dirname shell_file$
    cd "{root_dir}/.."

    dir_create(release_folder)

    trust $rm -rf Build *.xcarchive *.zip || true$

    trust {
        $rm -rf Build *.xcarchive || true$
        $export PATH={path}:/opt/homebrew/bin/$
        $export https_proxy=http://127.0.0.1:6152;export http_proxy=http://127.0.0.1:6152;export all_proxy=socks5://127.0.0.1:6153$
    }
}

fun build() {
    $xcodebuild archive \
        -scheme {project_name} \
        -derivedDataPath Build \
        -configuration Release \
        -destination 'platform=macOS' \
        -archivePath {archive_name} \
        clean archive \
        CODE_SIGN_IDENTITY="" CODE_SIGN_ENTITLEMENTS="" CODE_SIGNING_ALLOWED=NO \
        | xcbeautify$?
}

#[allow_generic_return]
fun extract(target_dir: Text) {
    silent $pushd {archive_name}/Products/Applications/$?

    let version = $/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" {app_name}/Contents/Info.plist$?

    let zip_name = "{target_dir}/{project_name}.zip"
    $zip -r {zip_name} {app_name}$?

    silent $popd$?
}

main(args) {
    echo "[*] start build."

    prepare(args[0]) failed {
        echo_error("Failed to prepare.", status)
    }

    build() failed {
        echo_error("Failed to build.", status)
    }

    let target_dir = "{trust $pwd$}/{release_folder}"
    if len(args) > 1 and len(args[1]) > 0 {
        target_dir = args[1]
    }

    extract(target_dir) failed {
        echo_error("Failed to extract.", status)
    }

    echo "[*] done build."
}
